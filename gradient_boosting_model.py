# -*- coding: utf-8 -*-
"""gradient_boosting_final (1) (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yUfOCsuRxVZGTt9q1C4kg4q19Z5bajBs

Train test split
"""

# trainDF, testDF =  stdscaledDF1.randomSplit([0.7,0.3], seed = 2020)
splits = assembledDF1.randomSplit([0.7, 0.3])
trainDF = splits[0]
testDF = splits[1]

# print the count of observations in each set
print("Observations in training set = ", trainDF.count())
print("Observations in testing set = ", testDF.count())

from pyspark.ml.regression import LinearRegression
from  pyspark.ml.regression import RandomForestRegressor

"""**Gradient** **boosting**"""

from pyspark.ml.regression import GBTRegressor

gbt = GBTRegressor(featuresCol="features", labelCol="price")

from pyspark.ml.evaluation import RegressionEvaluator

pred_evaluator = RegressionEvaluator(predictionCol="prediction", labelCol="price", metricName="r2")

from pyspark.ml.tuning import ParamGridBuilder, TrainValidationSplit, CrossValidator

paramGrid = ParamGridBuilder() \
    .addGrid(gbt.maxIter, [5, 10, 20, 50]) \
    .addGrid(gbt.maxDepth , [5, 7, 9]) \
    .build()


crossval = CrossValidator(estimator=gbt,
                          estimatorParamMaps=paramGrid,
                          evaluator=pred_evaluator,
                          numFolds=5)

cvModel2 = crossval.fit(trainDF)

prediction2 = cvModel2.transform(testDF)

prediction2.columns

prediction2.select("price", "prediction").show(10)

from pyspark.ml.evaluation import RegressionEvaluator
pred_evaluator = RegressionEvaluator(predictionCol="prediction", labelCol="price", metricName="r2")
print("R squared (R2) on test data =", pred_evaluator.evaluate(prediction2))

from pyspark.ml.evaluation import RegressionEvaluator
pred_evaluator = RegressionEvaluator(predictionCol="prediction", labelCol="price", metricName="mae")
print("mae =", pred_evaluator.evaluate(prediction2))

from pyspark.ml.evaluation import RegressionEvaluator
pred_evaluator = RegressionEvaluator(predictionCol="prediction", labelCol="price", metricName="rmse")
print("rmse =", pred_evaluator.evaluate(prediction2))

from pyspark.ml.evaluation import RegressionEvaluator
pred_evaluator = RegressionEvaluator(predictionCol="prediction", labelCol="price", metricName="mse")
print("mse =", pred_evaluator.evaluate(prediction2))



